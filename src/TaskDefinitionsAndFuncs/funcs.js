export const calculator = {
  name: "calculator",
  func: 'function (operation) {\r\n  const operators = ["(", ")", "*", "/", "+", "-"];\r\n  const nums = Array.from(Array(10).keys());\r\n\r\n  const chekValidity = op => {\r\n    if (op.filter(ch => !operators.includes(ch) && !nums.includes(+ch)).length)\r\n      return false;\r\n\r\n    const stack = [],\r\n      map = { "(": ")" },\r\n      prntArr = op.filter(ch => ch === "(" || ch === ")");\r\n\r\n    for (let i = 0; i < prntArr.length; i++) {\r\n      if (!stack.length && !map[prntArr[i]]) return false;\r\n      if (map[prntArr[i]]) {\r\n        stack.push(prntArr[i]);\r\n        continue;\r\n      }\r\n      if (map[stack[stack.length - 1]] === prntArr[i]) {\r\n        stack.pop();\r\n        continue;\r\n      }\r\n      return false;\r\n    }\r\n    return !stack.length;\r\n  };\r\n\r\n  let result = 0,\r\n    lastPrnths = [],\r\n    firstPrnths = [];\r\n\r\n  const opArr = operation\r\n    .split("")\r\n    .map(ch => ch.trim())\r\n    .filter(ch => ch !== "");\r\n\r\n  if (!chekValidity(opArr)) return "Oparation is not valid";\r\n\r\n  opArr.forEach((ch, i) => {\r\n    if (ch === "(") firstPrnths.push(i);\r\n    else if (ch === ")") lastPrnths.unshift(i);\r\n  });\r\n\r\n  const operate = (f, l) => {\r\n    const range = opArr.splice(f, l + 1);\r\n    range.pop();\r\n    range.shift();\r\n\r\n    let num = [],\r\n      numOpArr = [],\r\n      char,\r\n      operator;\r\n    for (let i = 0; i < range.length; i++) {\r\n      char = range[i];\r\n      if (nums.includes(+char)) num.push(char);\r\n      else {\r\n        operator = char;\r\n        if (num.length) {\r\n          numOpArr.push(num.join(""));\r\n          if (operator) numOpArr.push(operator);\r\n          num = [];\r\n        } else numOpArr.push(operator);\r\n      }\r\n    }\r\n    if (num.length) {\r\n      numOpArr.push(num.join(""));\r\n      num = [];\r\n    }\r\n    let num1,\r\n      num2,\r\n      i = 0;\r\n    while (i < numOpArr.length) {\r\n      char = numOpArr[i];\r\n      if (char === "*" || char === "/") {\r\n        if (!i) {\r\n          i++;\r\n          continue;\r\n        }\r\n        num1 = +numOpArr[i - 1];\r\n        num2 = +numOpArr[i + 1];\r\n        if (numOpArr[i - 2] === "+" || (numOpArr[i - 2] === "-" && i === 2)) {\r\n          num1 *= numOpArr[i - 2] === "+" ? 1 : -1;\r\n          numOpArr.splice(i - 2, i - 1);\r\n          i--;\r\n        }\r\n        num1 = char === "*" ? num1 * num2 : num1 / num2;\r\n        numOpArr.splice(i - 1, i + 2);\r\n        numOpArr.splice(i - 1, 0, num1);\r\n        i = i - 2;\r\n      }\r\n      i++;\r\n    }\r\n    i = 0;\r\n    while (i < numOpArr.length) {\r\n      char = numOpArr[i];\r\n      if (char === "+" || char === "-") {\r\n        if (!i) {\r\n          i++;\r\n          continue;\r\n        }\r\n        num1 = +numOpArr[i - 1];\r\n        num2 = +numOpArr[i + 1];\r\n        if ((numOpArr[i - 2] === "+" || numOpArr[i - 2] === "-") && i === 2) {\r\n          num1 *= numOpArr[i - 2] === "+" ? 1 : -1;\r\n          numOpArr.splice(i - 2, i - 1);\r\n          i--;\r\n        }\r\n        num1 = char === "+" ? num1 + num2 : num1 - num2;\r\n        numOpArr.splice(i - 1, i + 2);\r\n        numOpArr.splice(i - 1, 0, num1);\r\n        i = i - 2;\r\n      }\r\n      i++;\r\n    }\r\n\r\n    };\r\n\r\n  //operate until single number remains in the list, in a loop\r\n  operate(firstPrnths.pop(), lastPrnths.pop());\r\n\r\n  return result;\r\n}',
};

export const biggestAscending = {
  name: "biggestAscending",
  func: 'function (num) {\r\n  if (typeof num === "number") num += "";\r\n  const l = num.length;\r\n  const digits = num.split("");\r\n  let i = l - 1;\r\n  while (i > 0) {\r\n    if (digits[i] < digits[i - 1]) {\r\n      for (let k = i; k < l; k++) digits[k] = 9;\r\n      digits[i - 1]--;\r\n          continue;\r\n    }\r\n    i--;\r\n  }\r\n  return digits.join("");\r\n}',
};
